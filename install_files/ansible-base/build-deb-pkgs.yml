---
# Ensure that the build machine is present. If it hasn't been created,
# then Vagrant will not add it to the generated inventory file. Since
# the build machine is required for staging runs, error out with a helpful
# message, pointing the developer to the docs.
- name: Ensure Build VM is available.
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tasks:
    - name: Check for "build" machine in inventory.
      fail:
        msg: >
          The "build" VM is not reachable, but is required for building the
          app code Debian packages on the staging machines. Run `vagrant up build`,
          then `vagrant provision /staging/`. Thereafter you can run
          `ANSIBLE_ARGS="--tags rebuild" vagrant provision /staging/` to rebuild
          and reinstall the application code.
      when: "'build' not in groups.all"
  tags:
    - rebuild
    - local_build

# All plays in this playbook target the build host, but most be invoked separately,
# since we're using wrapper roles for the build. If you add multiple child roles with
# the same parent in the same play, Ansible conflates the dependencies, and only the
# last wrapper role will run. This is a known bug and will be fixed in v2.0.
- name: Build SecureDrop application Debian package from local repository.
  hosts: build
  become: yes
  vars_files:
    # The order of these files files is important, since each successive
    # include overrides vars in the previous files. Ordinarily we'd
    # use group memberships to manage the variable resolution order, but
    # since we're using Vagrant with Ansible, group management becomes tricky.
    - group_vars/securedrop.yml
    - group_vars/securedrop_application_server.yml
    - group_vars/development.yml
  pre_tasks:
    - set_fact:
        amazon_builder: "{{ true if 'amazon' in ansible_product_version else false }}"

    - name: Copy over current source folder to builder
      synchronize:
        src: ../../../
        dest: "{{ securedrop_repo }}"
        delete: yes
        use_ssh_args: yes
        recursive: yes
        rsync_opts:
          - "--exclude=*.git"
          - "--exclude=*.deb"
          - "--exclude=*app-*-*ths"
          - "--exclude=*mon-ssh-*ths"
      when: amazon_builder

    - name: Ensure all packages are up to date.
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600

    # These packages are necessary for running the `update_version.sh` script.
    - name: Install required build tools.
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - devscripts
        - git
  roles:
    - { role: build-securedrop-app-code-deb-pkg, tags: [ "app-deb" ] }
    - { role: build-generic-pkg, tags: ["securedrop-ossec-server"], package_name: "securedrop-ossec-server" }
    - { role: build-generic-pkg, tags: ["securedrop-ossec-agent"], package_name: "securedrop-ossec-agent" }
    - { role: build-generic-pkg, tags: ["securedrop-keyring"], package_name: "securedrop-keyring" }

  post_tasks:
    - name: Track down built debian packages
      find:
        paths: "{{ securedrop_repo }}/build/"
        patterns: "*deb"
      changed_when: false
      when: amazon_builder
      register: find_deb_result

    - name: Fetch back built deb packages
      fetch:
        src: "{{ item.path }}"
        dest: "../../build/"
        delete: yes
        flat: yes
      when: amazon_builder
      with_items: "{{ find_deb_result.files }}"
  tags: rebuild
